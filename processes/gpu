#!/bin/bash
gpu_setPower(){
 if [ $INDIVIDUAL_POWERLIMIT == "YES" ]
 then 
  POWER_LIMIT[0]=$GPU0MAXPL;
  POWER_LIMIT[1]=$GPU1MAXPL;
  POWER_LIMIT[2]=$GPU2MAXPL;
  POWER_LIMIT[3]=$GPU3MAXPL;
  POWER_LIMIT[4]=$GPU4MAXPL;
  POWER_LIMIT[5]=$GPU5MAXPL;
  POWER_LIMIT[6]=$GPU6MAXPL;
  POWER_LIMIT[7]=$GPU7MAXPL;
  POWER_LIMIT[8]=$GPU8MAXPL;
  POWER_LIMIT[9]=$GPU9MAXPL;
  POWER_LIMIT[10]=$GPU10MAXPL;
  POWER_LIMIT[11]=$GPU11MAXPL;
  POWER_LIMIT[12]=$GPU12MAXPL;
  POWER_LIMIT[13]=$GPU13MAXPL;
  POWER_LIMIT[14]=$GPU14MAXPL;
  POWER_LIMIT[15]=$GPU15MAXPL;
  POWER_LIMIT[16]=$GPU16MAXPL;
  POWER_LIMIT[17]=$GPU17MAXPL;
  POWER_LIMIT[18]=$GPU18MAXPL;
 fi;
 if [ $INDIVIDUAL_POWERLIMIT == "NO" ];
 then 
  POWER_LIMIT[0]=$POWERLIMIT_WATTS;
  POWER_LIMIT[1]=$POWERLIMIT_WATTS;
  POWER_LIMIT[2]=$POWERLIMIT_WATTS;
  POWER_LIMIT[3]=$POWERLIMIT_WATTS;
  POWER_LIMIT[4]=$POWERLIMIT_WATTS;
  POWER_LIMIT[5]=$POWERLIMIT_WATTS;
  POWER_LIMIT[6]=$POWERLIMIT_WATTS;
  POWER_LIMIT[7]=$POWERLIMIT_WATTS;
  POWER_LIMIT[8]=$POWERLIMIT_WATTS;
  POWER_LIMIT[9]=$POWERLIMIT_WATTS;
  POWER_LIMIT[10]=$POWERLIMIT_WATTS;
  POWER_LIMIT[11]=$POWERLIMIT_WATTS;
  POWER_LIMIT[12]=$POWERLIMIT_WATTS;
  POWER_LIMIT[13]=$POWERLIMIT_WATTS;
  POWER_LIMIT[14]=$POWERLIMIT_WATTS;
  POWER_LIMIT[15]=$POWERLIMIT_WATTS;
  POWER_LIMIT[16]=$POWERLIMIT_WATTS;
  POWER_LIMIT[17]=$POWERLIMIT_WATTS;
  POWER_LIMIT[18]=$POWERLIMIT_WATTS;
 fi;
}

gpu_setTemp(){
 if [ $INDIVIDUAL_TARGET_TEMPS == "YES" ]
 then 
  TARGET_TEMP[0]=$GPU0MAXTEMP;
  TARGET_TEMP[1]=$GPU1MAXTEMP;
  TARGET_TEMP[2]=$GPU2MAXTEMP;
  TARGET_TEMP[3]=$GPU3MAXTEMP;
  TARGET_TEMP[4]=$GPU4MAXTEMP;
  TARGET_TEMP[5]=$GPU5MAXTEMP;
  TARGET_TEMP[6]=$GPU6MAXTEMP;
  TARGET_TEMP[7]=$GPU7MAXTEMP;
  TARGET_TEMP[8]=$GPU8MAXTEMP;
  TARGET_TEMP[9]=$GPU9MAXTEMP;
  TARGET_TEMP[10]=$GPU10MAXTEMP;
  TARGET_TEMP[11]=$GPU11MAXTEMP;
  TARGET_TEMP[12]=$GPU12MAXTEMP;
  TARGET_TEMP[13]=$GPU13MAXTEMP;
  TARGET_TEMP[14]=$GPU14MAXTEMP;
  TARGET_TEMP[15]=$GPU15MAXTEMP;
  TARGET_TEMP[16]=$GPU16MAXTEMP;
  TARGET_TEMP[17]=$GPU17MAXTEMP;
  TARGET_TEMP[18]=$GPU18MAXTEMP;
 fi;
 if [ $INDIVIDUAL_TARGET_TEMPS == "NO" ];
 then
  TARGET_TEMP[0]=$TARGET_TEMP;
  TARGET_TEMP[1]=$TARGET_TEMP;
  TARGET_TEMP[2]=$TARGET_TEMP;
  TARGET_TEMP[3]=$TARGET_TEMP;
  TARGET_TEMP[4]=$TARGET_TEMP;
  TARGET_TEMP[5]=$TARGET_TEMP;
  TARGET_TEMP[6]=$TARGET_TEMP;
  TARGET_TEMP[7]=$TARGET_TEMP;
  TARGET_TEMP[8]=$TARGET_TEMP;
  TARGET_TEMP[9]=$TARGET_TEMP;
  TARGET_TEMP[10]=$TARGET_TEMP;
  TARGET_TEMP[11]=$TARGET_TEMP;
  TARGET_TEMP[12]=$TARGET_TEMP;
  TARGET_TEMP[13]=$TARGET_TEMP;
  TARGET_TEMP[14]=$TARGET_TEMP;
  TARGET_TEMP[15]=$TARGET_TEMP;
  TARGET_TEMP[16]=$TARGET_TEMP;
  TARGET_TEMP[17]=$TARGET_TEMP;
  TARGET_TEMP[18]=$TARGET_TEMP;
 fi;
}

OVERCLOCKCHECK(){ # backwards compatibility for tempcontrol program
 gpu_setClock
}

gpu_setClock(){ # Used to be 3MAINOCC and OVERCLOCKCHECK
 if [[ $INDIVIDUAL_CLOCKS == "YES"&&$AUTOMATIC_OVERCLOCK == "NO" ]];
 then
  __CORE_OVERCLOCK[0]=$GPU0SCORE;
  MEMORY_OVERCLOCK[0]=$GPU0SMEM;
  __CORE_OVERCLOCK[1]=$GPU1SCORE;
  MEMORY_OVERCLOCK[1]=$GPU1SMEM;
  __CORE_OVERCLOCK[2]=$GPU2SCORE;
  MEMORY_OVERCLOCK[2]=$GPU2SMEM;
  __CORE_OVERCLOCK[3]=$GPU3SCORE;
  MEMORY_OVERCLOCK[3]=$GPU3SMEM;
  __CORE_OVERCLOCK[4]=$GPU4SCORE;
  MEMORY_OVERCLOCK[4]=$GPU4SMEM;
  __CORE_OVERCLOCK[5]=$GPU5SCORE;
  MEMORY_OVERCLOCK[5]=$GPU5SMEM;
  __CORE_OVERCLOCK[6]=$GPU6SCORE;
  MEMORY_OVERCLOCK[6]=$GPU6SMEM;
  __CORE_OVERCLOCK[7]=$GPU7SCORE;
  MEMORY_OVERCLOCK[7]=$GPU7SMEM;
  __CORE_OVERCLOCK[8]=$GPU8SCORE;
  MEMORY_OVERCLOCK[8]=$GPU8SMEM;
  __CORE_OVERCLOCK[9]=$GPU9SCORE;
  MEMORY_OVERCLOCK[9]=$GPU9SMEM;
  __CORE_OVERCLOCK[10]=$GPU10SCORE;
  MEMORY_OVERCLOCK[10]=$GPU10SMEM;
  __CORE_OVERCLOCK[11]=$GPU11SCORE;
  MEMORY_OVERCLOCK[11]=$GPU11SMEM;
  __CORE_OVERCLOCK[12]=$GPU12SCORE;
  MEMORY_OVERCLOCK[12]=$GPU12SMEM;
  __CORE_OVERCLOCK[13]=$GPU13SCORE;
  MEMORY_OVERCLOCK[13]=$GPU13SMEM;
  __CORE_OVERCLOCK[14]=$GPU14SCORE;
  MEMORY_OVERCLOCK[14]=$GPU14SMEM;
  __CORE_OVERCLOCK[15]=$GPU15SCORE;
  MEMORY_OVERCLOCK[15]=$GPU15SMEM;
  __CORE_OVERCLOCK[16]=$GPU16SCORE;
  MEMORY_OVERCLOCK[16]=$GPU16SMEM;
  __CORE_OVERCLOCK[17]=$GPU17SCORE;
  MEMORY_OVERCLOCK[17]=$GPU17SMEM;
  __CORE_OVERCLOCK[18]=$GPU18SCORE;
  MEMORY_OVERCLOCK[18]=$GPU18SMEM;
 elif [[ $INDIVIDUAL_CLOCKS == "NO"&&$AUTOMATIC_OVERCLOCK == "YES" ]];
 then
  __CORE_OVERCLOCK[0]=$GPU0SCORE;
  MEMORY_OVERCLOCK[0]=$GPU0SMEM;
  __CORE_OVERCLOCK[1]=$GPU1SCORE;
  MEMORY_OVERCLOCK[1]=$GPU1SMEM;
  __CORE_OVERCLOCK[2]=$GPU2SCORE;
  MEMORY_OVERCLOCK[2]=$GPU2SMEM;
  __CORE_OVERCLOCK[3]=$GPU3SCORE;
  MEMORY_OVERCLOCK[3]=$GPU3SMEM;
  __CORE_OVERCLOCK[4]=$GPU4SCORE;
  MEMORY_OVERCLOCK[4]=$GPU4SMEM;
  __CORE_OVERCLOCK[5]=$GPU5SCORE;
  MEMORY_OVERCLOCK[5]=$GPU5SMEM;
  __CORE_OVERCLOCK[6]=$GPU6SCORE;
  MEMORY_OVERCLOCK[6]=$GPU6SMEM;
  __CORE_OVERCLOCK[7]=$GPU7SCORE;
  MEMORY_OVERCLOCK[7]=$GPU7SMEM;
  __CORE_OVERCLOCK[8]=$GPU8SCORE;
  MEMORY_OVERCLOCK[8]=$GPU8SMEM;
  __CORE_OVERCLOCK[9]=$GPU9SCORE;
  MEMORY_OVERCLOCK[9]=$GPU9SMEM;
  __CORE_OVERCLOCK[10]=$GPU10SCORE;
  MEMORY_OVERCLOCK[10]=$GPU10SMEM;
  __CORE_OVERCLOCK[11]=$GPU11SCORE;
  MEMORY_OVERCLOCK[11]=$GPU11SMEM;
  __CORE_OVERCLOCK[12]=$GPU12SCORE;
  MEMORY_OVERCLOCK[12]=$GPU12SMEM;
  __CORE_OVERCLOCK[13]=$GPU13SCORE;
  MEMORY_OVERCLOCK[13]=$GPU13SMEM;
  __CORE_OVERCLOCK[14]=$GPU14SCORE;
  MEMORY_OVERCLOCK[14]=$GPU14SMEM;
  __CORE_OVERCLOCK[15]=$GPU15SCORE;
  MEMORY_OVERCLOCK[15]=$GPU15SMEM;
  __CORE_OVERCLOCK[16]=$GPU16SCORE;
  MEMORY_OVERCLOCK[16]=$GPU16SMEM;
  __CORE_OVERCLOCK[17]=$GPU17SCORE;
  MEMORY_OVERCLOCK[17]=$GPU17SMEM;
  __CORE_OVERCLOCK[18]=$GPU18SCORE;
  MEMORY_OVERCLOCK[18]=$GPU18SMEM;
 elif [[ $INDIVIDUAL_CLOCKS == "YES"&&$AUTOMATIC_OVERCLOCK == "YES" ]];
 then
  __CORE_OVERCLOCK[0]=$GPU0SCORE;
  MEMORY_OVERCLOCK[0]=$GPU0SMEM;
  __CORE_OVERCLOCK[1]=$GPU1SCORE;
  MEMORY_OVERCLOCK[1]=$GPU1SMEM;
  __CORE_OVERCLOCK[2]=$GPU2SCORE;
  MEMORY_OVERCLOCK[2]=$GPU2SMEM;
  __CORE_OVERCLOCK[3]=$GPU3SCORE;
  MEMORY_OVERCLOCK[3]=$GPU3SMEM;
  __CORE_OVERCLOCK[4]=$GPU4SCORE;
  MEMORY_OVERCLOCK[4]=$GPU4SMEM;
  __CORE_OVERCLOCK[5]=$GPU5SCORE;
  MEMORY_OVERCLOCK[5]=$GPU5SMEM;
  __CORE_OVERCLOCK[6]=$GPU6SCORE;
  MEMORY_OVERCLOCK[6]=$GPU6SMEM;
  __CORE_OVERCLOCK[7]=$GPU7SCORE;
  MEMORY_OVERCLOCK[7]=$GPU7SMEM;
  __CORE_OVERCLOCK[8]=$GPU8SCORE;
  MEMORY_OVERCLOCK[8]=$GPU8SMEM;
  __CORE_OVERCLOCK[9]=$GPU9SCORE;
  MEMORY_OVERCLOCK[9]=$GPU9SMEM;
  __CORE_OVERCLOCK[10]=$GPU10SCORE;
  MEMORY_OVERCLOCK[10]=$GPU10SMEM;
  __CORE_OVERCLOCK[11]=$GPU11SCORE;
  MEMORY_OVERCLOCK[11]=$GPU11SMEM;
  __CORE_OVERCLOCK[12]=$GPU12SCORE;
  MEMORY_OVERCLOCK[12]=$GPU12SMEM;
  __CORE_OVERCLOCK[13]=$GPU13SCORE;
  MEMORY_OVERCLOCK[13]=$GPU13SMEM;
  __CORE_OVERCLOCK[14]=$GPU14SCORE;
  MEMORY_OVERCLOCK[14]=$GPU14SMEM;
  __CORE_OVERCLOCK[15]=$GPU15SCORE;
  MEMORY_OVERCLOCK[15]=$GPU15SMEM;
  __CORE_OVERCLOCK[16]=$GPU16SCORE;
  MEMORY_OVERCLOCK[16]=$GPU16SMEM;
  __CORE_OVERCLOCK[17]=$GPU17SCORE;
  MEMORY_OVERCLOCK[17]=$GPU17SMEM;
  __CORE_OVERCLOCK[18]=$GPU18SCORE;
  MEMORY_OVERCLOCK[18]=$GPU18SMEM;
 fi;
 if [[ $INDIVIDUAL_CLOCKS == "NO"&&$AUTOMATIC_OVERCLOCK == "NO" ]];
 then
  source ~/1bash;
  __CORE_OVERCLOCK[0]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[0]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[1]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[1]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[2]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[2]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[3]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[3]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[4]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[4]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[5]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[5]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[6]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[6]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[7]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[7]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[8]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[8]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[9]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[9]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[10]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[10]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[11]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[11]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[12]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[12]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[13]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[13]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[14]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[14]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[15]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[15]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[16]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[16]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[17]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[17]=$MEMORY_OVERCLOCK;
  __CORE_OVERCLOCK[18]=$__CORE_OVERCLOCK;
  MEMORY_OVERCLOCK[18]=$MEMORY_OVERCLOCK;
 fi;
}

CHECK_CARD(){
 gpu_checkCard
}

gpu_checkCard() {
 DIDS=$(nvidia-smi --query-gpu=pci.sub_device_id --format=csv,noheader,nounits)
 i=0
 for ID in $DIDS
  do
   VENDOR_ID=${ID:6:5}
   case $VENDOR_ID in
    3842) VENDOR_ID="EVGA";;
    1462) VENDOR_ID="MSI";;
    10DE) VENDOR_ID="NVIDIA";;
    19DA) VENDOR_ID="ZOTAC";;
    807D|1043) VENDOR_ID="ASUS";;
    1458) VENDOR_ID="GIGABYTE";;
    196E) VENDOR_ID="PNY";;
    1569) VENDOR_ID="PALIT";;
   esac
    { IFS=', ' read PSTATE CURRENT_TEMP CURRENT_FAN UTILIZATION PWRLIMIT POWERDRAW; } < <(nvidia-smi -i $i --query-gpu=pstate,temperature.gpu,fan.speed,utilization.gpu,power.limit,power.draw --format=csv,noheader,nounits)
     MODEL=$(nvidia-smi -i $i --query-gpu=name --format=csv,noheader,nounits | tail -1)
     POWERMAX=$(nvidia-smi -i $i -q|grep "Max Power"|cut -f 2 -d ":"|cut -f 2 -d " ")
     GPUI[${i}]=$VENDOR_ID
     WORDTOREMOVE="GeForce GTX "
     MODEL=${MODEL//$WORDTOREMOVE/}
     MODEL=${MODEL//[[:blank:]]/}
     GPUB[${i}]=$MODEL
     POWERMAX=${POWERMAX%.*}
     let GPUP[${i}]=$POWERMAX
     #OCDB # disabled call to OCDB for overclock setup
      i=$(($i + 1))
  done
}

gpu_isNormalOr1050() {
 ___1050_or_1050ti="NO";
 NORMAL="NO";
 P106_100="NO";
 nvidia-smi -L>/tmp/tempa;

 if grep -q "1050" /tmp/tempa;
 then 
  ___1050_or_1050ti="YES";
 fi;
 if grep -q "1060" /tmp/tempa;
 then
  NORMAL="YES";
 fi;
 if grep -q "1070" /tmp/tempa;
 then
  NORMAL="YES";
 fi;
 if grep -q "1070ti" /tmp/tempa;
 then
  NORMAL="YES";
 fi;
 if grep -q "1080" /tmp/tempa;
  then
   NORMAL="YES";
 fi;
 if grep -q "1080ti" /tmp/tempa;
 then
  NORMAL="YES";
 fi;
 if grep -q "P106-100" /tmp/tempa;
 then
  ___1050_or_1050ti="YES";
  P106_100="YES";
 fi;
 sudo rm -f /tmp/tempa;
 TI="3";
 if [ $___1050_or_1050ti == "YES" ];
 then
  TI="2";
  if [ $NORMAL == "YES" ];
  then
   TI="2 3";
  fi;
 fi;
}

gpu_M_GPU(){
 D_IDS=$(nvidia-smi --query-gpu=pci.sub_device_id --format=csv,noheader,nounits)
 i=0
 echo -e "${C}${B}-------------------------------------- GPU LIST ---------------------------------------${N}"
 echo -e "${N}${C}${Y}ID${N}-${R}VENDOR${N}-${R}MODEL${N}-${C}PSTATE${N}-${B}TEMP${N}-${C}FAN${N}-${B}UTILIZATION${N}-${C}GPUCLOCK${N}-${B}MEMCLOCK${N}-${C}POWER${N}-${B}POWERLIMIT${N}-${C}MAXPOWER${N}"
 echo -e "${C}${B}---------------------------------------------------------------------------------------${N}"              
 for ID in $D_IDS
  do
   V_ID=${ID:6:5}
   case $V_ID in
    3842) V_ID="EVGA";;
    1462) V_ID="MSI";;
    10DE) V_ID="NVIDIA";;
    19DA) V_ID="ZOTAC";;
    807D|1043) V_ID="ASUS";;
    1458) V_ID="GIGABYTE";;
    196E) V_ID="PNY";;
    1569) V_ID="PALIT";;
   esac
    { IFS=', ' read PSTATE CURRENT_TEMP CURRENT_FAN UTILIZATION PWRLIMIT POWERDRAW; } < <(nvidia-smi -i $i --query-gpu=pstate,temperature.gpu,fan.speed,utilization.gpu,power.limit,power.draw --format=csv,noheader,nounits)
      MODEL=$(nvidia-smi -i $i --query-gpu=name --format=csv,noheader,nounits | tail -1)
      POWERMAX=$(nvidia-smi -i $i -q|grep "Max Power"|cut -f 2 -d ":"|cut -f 2 -d " ")
      GPUCLOCK=$(nvidia-smi -i $i -q -d CLOCK |grep Graphics |head -1|cut -f 2 -d ":"|cut -f 2 -d " ")
      MEMCLOCK=$(nvidia-smi -i $i -q -d CLOCK |grep Memory |head -1|cut -f 2 -d ":"|cut -f 2 -d " ")
      echo -e "${N}${C}${Y}$i${N}, ${R}$V_ID${N}, ${R}$MODEL${N}, ${C}$PSTATE${N}, ${B}$CURRENT_TEMP${N}, ${C}$CURRENT_FAN${N}, ${B}$UTILIZATION${N}, ${C}$GPUCLOCK${N}, ${B}$MEMCLOCK${N}, ${C}$POWERDRAW${N}, ${B}$PWRLIMIT${N}, ${C}$POWERMAX${N}"
      i=$(($i + 1))
  done
}
