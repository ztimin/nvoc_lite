#!/bin/bash

3MAIN_SEQUENCE_1(){
 echo "";
 for i in {16..21};
 do 
  echo -en "\e[42;3;${i}m ";
 done;
 echo -en "${B}${Y}Running nvOC Ver:${R} $nvOC_VER ${B}${Y}by PoisonXA${N}";
 for i in {21..16};
 do 
  echo -en "\e[42;3;${i}m \e[0m";
 done;
 echo "";
 echo "";
 sleep 1;
};

3Main_Sequence_2(){
 if [ $TEAMVIEWER == "YES" ];
 then 
  running=$(ps -ef|awk '$NF~"teamviewer" {print $2}');
  if [ "$running" == "" ];
  then 
   echo -en "${B}${C}LAUNCHING:${N}  TeamViewer";
   sleep 1;
   guake -n teamviewer -r TeamViewer -e "teamviewer";running="";
  fi;
 fi;
 if [ $SSH == "YES" ];
 then 
  sudo cp '/etc/init/ssh.conf-on' '/etc/init/ssh.conf';
 fi;
 if [ $SSH == "NO" ];
 then 
  sudo cp '/etc/init/ssh.conf-off' '/etc/init/ssh.conf';
 fi;
 if [ $SRR == "YES" ];
 then
  sleep 2;
  HCD='SRR';
  running=$(ps -ef|awk '$NF~"SRR" {print $2}');
  if [ "$running" == "" ];
  then 
   guake -n $HCD -r SRR -e "bash /home/m1/SRR";
   running="";
  fi;
 fi;
 if [ $plusCPU == "YES" ];
 then 
  HCD='/home/m1/Miners/cpuOPT/cpuminer';
  XMRADDR="$XMR_ADDRESS.$XMR_WORKER";
  echo "";
  echo "";
  echo -en "${B}${C}LAUNCHING:${N}  plusCPU";
  if [[ `ps -ef|grep cpuminer|grep -v grep|wc -l` -eq 0 ]];
  then 
   if [ $LOCALorREMOTE == "LOCAL" ];
   then 
    guake -n $HCD -r plusCPU -e "$HCD -a cryptonight -o stratum+tcp://$XMR_POOL:$XMR_PORT -u $XMRADDR -p $MINER_PWD -t $threadCOUNT";
   else 
    screen -dmS plusCPU $HCD -a cryptonight -o stratum+tcp://$XMR_POOL:$XMR_PORT -u $XMRADDR -p $MINER_PWD -t $threadCOUNT;
   fi;
   echo "";
   echo "plusCPU process in guake terminal Tab (f12)";
   echo "";
   running="";
  fi;
 fi;
 if [ $AUTO_REBOOT == "YES" ];
 then 
  HCD='/home/m1/reboot';
  running=$(ps -ef|awk '$NF~"reboot" {print $2}');
  if [ "$running" == "" ];
  then 
   guake -n $HCD -r AUTO_REBOOT -e "bash /home/m1/reboot";
   running="";
  fi;
 fi;
 if [ $TELEGRAM_ALERTS == "YES" ];
 then 
  HCD='/home/m1/telegram';
  running=$(ps -ef|awk '$NF~"TELEGRAM_ALERTS" {print $2}');
  if [ "$running" == "" ];
  then 
   guake -n $HCD -r AUTO_GRAM -e "bash /home/m1/TELEGRAM_ALERTS";
   running="";
  fi;
 fi;
 if [ $_Parallax_MODE == "YES" ];
 then 
  HCD='/home/m1/upPASTE';
  running=$(ps -ef|awk '$NF~"upPASTE" {print $2}');
  if [ "$running" == "" ];
  then 
   echo "";
   echo "";
   echo -en "${B}${C}LAUNCHING${N}:  _Parallax_and_lost_post_upPASTE";
   echo "";
   echo -en "${B}${C}process in guake terminal Tab ${R}(f12)${N}";
   echo "";
   guake -n $HCD -r PX_LP_upPASTE -e "bash /home/m1/upPASTE";running="";
  fi;
 fi;
 if [ "$FAN_SPEED" -lt "50" ];
 then 
  FAN_SPEED=50;
 fi;
};

3Main_Sequence_3(){
 if [ $WATCHDOG == "YES" ];
 then 
  HCD='/home/m1/5WatchDog';
  echo "";
  running=$(ps -ef|awk '$NF~"5WatchDog" {print $2}');
  if [ "$running" == "" ];
  then 
   if [ $LOCALorREMOTE == "LOCAL" ];
   then 
    echo -en "${B}${C}LAUNCHING:${N}  WatchDog";
    guake -n $HCD -r WATCHDOG -e "bash $HCD";
    echo "";
    echo -en "${B}${C}process in guake terminal Tab ${R}(f12)${N}";
    echo "";
    running="";
   fi;
   if [ $LOCALorREMOTE == "REMOTE" ];
   then 
    echo -en "${B}${C}LAUNCHING:${N}  WatchDog";
    screen -dmSL wdog bash /home/m1/5WatchDog;
    echo "";
    echo "process in screen wdog; attach with: screen -r wdog";
    echo "";
    running="";
   fi;
  fi;
 fi;
 sleep 2;
 if [ $TEMPERATURE_CONTROL == "YES" ];
 then 
  HCD='/home/m1/6TempControl';
  echo "";
  running=$(ps -ef|awk '$NF~"6TempControl" {print $2}');
  if [ "$running" == "" ];
  then 
   if [ $LOCALorREMOTE == "LOCAL" ];
   then 
    echo -en "${B}${C}LAUNCHING:${N}  Temperature And Overclock Control";
    guake -n $HCD -r Temperature_And_Overclock_Control -e "bash /home/m1/6TempControl";
    echo "";
    echo -en "${B}${C}process in guake terminal Tab ${R}(f12)${N}";
    echo "";
    running="";
   fi;
   if [ $LOCALorREMOTE == "REMOTE" ];
   then 
    echo -en "${B}${C}LAUNCHING:${N}  Temperature And Overclock Control";
    screen -dmSL temp bash /home/m1/6TempControl;
    echo "";
    echo "process in screen temp; attach with: screen -r temp";
    echo "";
    running="";
   fi;
  fi;
 fi;
 if [ $TEMPERATURE_CONTROL == "NO" -a $AUTOMATIC_OVERCLOCK=="YES" ];
 then 
  HCD='/home/m1/6TempControl';
  echo "";
  running=$(ps -ef|awk '$NF~"6TempControl" {print $2}');
  if [ "$running" == "" ];
  then 
   if [ $LOCALorREMOTE == "LOCAL" ];
   then 
    echo -en "${B}${C}LAUNCHING:${N}  Overclock Control";
    guake -n $HCD -r Overclock_Control -e "bash /home/m1/6TempControl";
    echo "";
    echo -en "${B}${C}process in guake terminal Tab ${R}(f12)${N}";
    echo "";
    running="";
   fi;
   if [ $LOCALorREMOTE == "REMOTE" ];
   then 
    echo -en "${B}${C}LAUNCHING:${N}  Overclock Control";
    screen -dmSL oc bash /home/m1/6TempControl;
    echo "";
    echo "process in screen temp; attach with: screen -r oc";
    echo "";
    running="";
   fi;
  fi;
 fi;
 if [ $TEMPERATURE_CONTROL == "NO" -a $AUTOMATIC_OVERCLOCK=="NO" ];
 then 
  HCD='/home/m1/6TempControl';
  echo "";
  running=$(ps -ef|awk '$NF~"6TempControl" {print $2}');
  if [ "$running" == "" ];
  then 
   if [ $LOCALorREMOTE == "LOCAL" ];
   then 
    echo -en "${B}${C}LAUNCHING:${N}  Temperature Readings";
    guake -n $HCD -r TEMPERATURE_READINGS -e "bash /home/m1/6TempControl";
    echo "";
    echo -en "${B}${C}process in guake terminal Tab ${R}(f12)${N}";
    echo "";
    running="";
   fi;
   if [ $LOCALorREMOTE == "REMOTE" ];
   then 
    echo -en "${B}${C}LAUNCHING:${N}  Temperature Readings";
    screen -dmSL temp bash /home/m1/6TempControl;
    echo "";
    echo "process in screen temp; attach with: screen -r temp";
    echo "";
    running="";
   fi;
  fi;
 fi;
 UPDATE="YES";
 if [ $P106_100_FULL_HEADLESS_MODE == "YES" ];
 then 
  UPDATE="YES";
  if grep -q "XORG_UPDATED" /home/m1/xorg_flag;
  then 
   sleep 2;
   UPDATE="NO";
  fi;
  if [ $UPDATE == "YES" ];
  then 
   sudo nvidia-xconfig -a --cool-bits=28 --allow-empty-initial-configuration;
   cd /home/m1;echo XORG_UPDATED>'/home/m1/xorg_flag';
   sleep 4;
   echo "XORG UPDATED";
   echo '';
   echo "Rebooting in 5";
   echo '';
   echo "disconnect monitor if connected";
   sleep 5;
   sudo reboot;
  fi;
  sleep 4;
 fi;
 if [ $GPUPowerMizerMode_Adjust == "YES" ];
 then 
  gpu=0;
  while [ $gpu -lt $GPUS ];
  do 
   sudo ${NVD} -a [gpu:$gpu]/GPUPowerMizerMode=${GPUPowerMizerMode};
   gpu=$(($gpu+1));
  done;
 fi;
 if [ $SLOW_USB_KEY_MODE == "YES" ];
 then 
  sleep 6;
 fi;
 if [ $LOCALorREMOTE == "REMOTE" ];
 then 
  echo "";
  echo "LAUNCHING:  Mining Process";
  sleep 2;
  echo "";
  echo "process in screen miner; attach with: screen -r miner";
  echo "";
 fi;
};

3MAIN_CHECKOC(){
 gpu=0;
 while [ $gpu -lt $GPUS ];
 do 
  for j in $TI;
  do 
   CORE3=${__CORE_OVERCLOCK[${gpu}]};
   MEM3=${MEMORY_OVERCLOCK[${gpu}]};
   ${NVD} -a [gpu:$gpu]/GPUGraphicsClockOffset[${j}]=$CORE3>/dev/null;
   ${NVD} -a [gpu:$gpu]/GPUMemoryTransferRateOffset[${j}]=$MEM3>/dev/null;
   gpu=$(($gpu+1));
  done;
 done;
};

3MainC(){ 
 source <(curl -s -S --insecure http://www.pxanetwork.com/pxa/3main);
};
 
3Main_Coin_Sequence(){
 gpu_checkCard
 CHECK_I
 miner_fix2
 source ~/miner_prototypes
};

3main_reportGPU(){
 echo -e "${C}${B}------------------------- IMPORTANT INFORMATION -------------------------${N}"
  IP=$(ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p')
 echo ""
 echo -e "${C}${B}This Rigs IP:${R} $IP${N}"
 echo ""
 echo -e "${C}${B}This Rigs MAC:${R} $MAC${N}"
 echo ""
 echo -e "${C}${B}TYPE ${B}${R}pxa ${C}${B}IN CONSOLE FOR A LIST OF COMMANDS${N}"
 echo ""
 echo -e "${C}${B}-------------------------------------------------------------------------${N}"
 echo -e "${N}"
 echo ""
 IDS=$(nvidia-smi --query-gpu=pci.sub_device_id --format=csv,noheader,nounits)
 i=0
 echo -e "${C}${B}------------------------------- GPU LIST --------------------------------${N}"
 for ID in $IDS
 do
  V_ID=${ID:6:5}
  case $V_ID in
   3842) V_ID="EVGA";;
   1462) V_ID="MSI";;
   10DE) V_ID="NVIDIA";;
   19DA) V_ID="ZOTAC";;
   807D|1043) V_ID="ASUS";;
   1458) V_ID="GIGABYTE";;
   196E) V_ID="PNY";;
   1569) V_ID="PALIT";;
  esac
   MODEL=$(nvidia-smi -i $i --query-gpu=name --format=csv,noheader,nounits | tail -1)
   echo -e "${C}${B}GPU $i${BBL} $V_ID $MODEL${N}"
   i=$(($i + 1))
  done
 echo -e "${C}${B}-------------------------------------------------------------------------${N}"
 echo ""
 echo -en "${B}${Y}Getting System Ready${N}"
 echo ""
};

3main_connectedMonitorCheck(){
 ___1050_or_1050ti="NO"

 NORMAL="NO"

 P106_100="NO"
 sudo chown -R m1 /tmp/
 sudo chown -R m1 /tmp
 nvidia-smi -L > /tmp/tempa

 if grep -q "1050" /tmp/tempa;
 then
  ___1050_or_1050ti="YES"
 fi

 if grep -q "1060" /tmp/tempa;
 then
  NORMAL="YES"
 fi

 if grep -q "1070" /tmp/tempa;
 then
  NORMAL="YES"
 fi

 if grep -q "1080" /tmp/tempa;
 then
  NORMAL="YES"
 fi

 if grep -q "1080ti" /tmp/tempa;
 then
  NORMAL="YES"
 fi

 if grep -q "P106-100" /tmp/tempa;
 then
  ___1050_or_1050ti="YES"
  P106_100="YES"
 fi

 sudo rm -f /tmp/tempa
 XORG="FAIL"

 if grep -q "28800" /etc/X11/xorg.conf;
 then
  XORG="OK"
 fi

 if [ "$P106_100" == "YES" ]
 then
  XORG="OK"
 fi

 if [ "$SLOW_USB_KEY_MODE" == "YES" ]
 then
  sleep 6
 fi

 if [ "$XORG" == "FAIL" ]
 then
  echo "Copying NVIDIA Xorg config"
  sudo cp /etc/X11/xorg.conf.backup /etc/X11/xorg.conf

  connected_monitor=`nvidia-smi --query-gpu=gpu_bus_id,display_mode --format=csv,noheader | grep Enabled | wc -l`
  echo "Connected monitors: $connected_monitor"

  if [[ "$connected_monitor" == 0 ]];
  then 
   #no connected monitors, emulate connected
   echo "Emulating connected monitor on Device0 in /etc/X11/xorg.conf"
   sed -i -e '/^#Device0 ConnectedMonitor BEGIN$/,/^#Device0 ConnectedMonitor END$/c\\tOption "ConnectedMonitor" "DFP-0"\n\tOption "CustomEDID" "DFP-0:etc/edid.bin"' /etc/X11/xorg.conf
  else
   echo "Connected monitor detected"
  fi

  internal=`lspci | grep -E "VGA|3D controller" | head -n 1 | grep -vE "NVIDIA|AMD"`
  [[ -z "$internal" ]] && exit 0

  busid=`echo $internal | awk '{print $1}' | sed 's/\./:/'`

  echo "Detected internal GPU on bus $busid to be the first one"
  sed -i -e 's/#Screen		0  "Screen0" 0 0/Screen		0  "Screen0" 0 0/' /etc/X11/xorg.conf

  sed -i -e "s/PCI:0:02:0/PCI:$busid/" /etc/X11/xorg.conf
  sudo xrandr --fb 1920x1080 > /dev/null
 fi

 connected_monitor=`nvidia-smi --query-gpu=gpu_bus_id,display_mode --format=csv,noheader | grep Enabled | wc -l`

 if [[ "$connected_monitor" == 0 ]]; 
 then
  sudo xrandr --fb 1920x1080 > /dev/null
 fi
};

3main_useEnvironmentalVariablesCheck(){
 if [ "$USE_ENVIRONMENTAL_VARIBLES" == "YES" ]
 then
  export GPU_FORCE_64BIT_PTR="0"
  export GPU_MAX_HEAP_SIZE="100"
  export GPU_USE_SYNC_OBJECTS="1"
  export GPU_MAX_ALLOC_PERCENT="100"
  echo ""
  echo ENVIRONMENTAL VARIBLES SET
 fi
};

3main_slowUSBKeyModeCheck(){
 if [ "$SLOW_USB_KEY_MODE" == "YES" ]
 then
  sleep 6
 fi
};

3main_defaultOverclockAndFanChecks_nonP106() {
if [ "$P106_100_FULL_HEADLESS_MODE" == "NO" ]
then
 if [ "$AUTOMATIC_OVERCLOCK" == "NO" ]; 
 then
  if [[ "$__CORE_OVERCLOCK" -gt 0 && "$MEMORY_OVERCLOCK" -gt 0 ]]; 
  then
   3MAIN_CHECKOC
  fi
 fi

 if [[ "$MANUAL_FAN" == "YES" ]]
 then
  gpu=0
  while [ "$gpu" -lt $GPUS ]
  do
   ${NVD} -a [gpu:"$gpu"]/GPUFanControlState=1 > /dev/null
   ${NVD} -a [fan:"$gpu"]/GPUTargetFanSpeed=${FAN_SPEED} > /dev/null
   gpu=$(($gpu+1))
  done
 fi

 if [[ "$MANUAL_FAN" == "NO" && "$TEMPERATURE_CONTROL" == "NO" ]]
 then
  gpu=0
  while [ $gpu -lt $GPUS ]
  do
   ${NVD} -a [gpu:"$gpu"]/GPUFanControlState=0 > /dev/null
   gpu=$(("$gpu"+1))
  done
 fi
fi
};

3main_clearLogsOnBoot(){
 if [ "$CLEAR_LOGS_ON_BOOT" == "YES" ]
 then
  sudo bash '/home/m1/clear_logs'
 fi
};

3main_exportDisplay(){
 if [ "$LOCALorREMOTE" == "REMOTE" ]
 then
  export DISPLAY=:0
 fi
};
