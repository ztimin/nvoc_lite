#!/bin/bash
# whttomine.com auto switch for nvOC by fullzero , v0019.2 unofficial by papampi

#Feel free to use, change, edit and do what you want with it.

source ~/1bash
source ~/Resources
MAKE_WTM_LOGS
while true
do
WTM_AVERAGE_REV=$(awk '{s+=$1}END{print "",s/NR}' RS="\n"  /home/m1/Alerts/WTM_24H_REV)
echo -e "${Y}${B}"
  #Waiting for miner start before start switching
    if [[ -z  $(ps ax | grep SCREEN | grep miner | grep -v cpuminer) ]];then
      echo "Miner not running" | tee -a $LOG3_FILE
      echo "" | tee -a $LOG3_FILE
      while [[ -z  $(ps ax | grep SCREEN | grep miner | grep -v cpuminer) ]];  do
        echo "Miner still not running, waiting ..." | tee -a $LOG3_FILE
        echo "" | tee -a $LOG3_FILE
        sleep 5
      done
    fi
    if [[ -n  $(ps ax | grep SCREEN | grep miner | grep -v cpuminer) ]];  then
      echo "Miner is running now" | tee -a $LOG3_FILE
      #If miner running time is lower than given time don't check for better coin
      MINER_TIME=$(ps -eo pid,etimes | grep $(ps -ef | grep SCREEN | grep miner | grep -v cpuminer | head -1 | awk '{print $2}') | awk '{print $2}')
      MINER_TIME_MIN=$(( $MINER_TIME / 60 ))
      if [[ $MINER_TIME_MIN -lt $WTM_MINIMUM_MINING_TIME ]] ; then
        echo "Mining $CURRENT_COIN for $MINER_TIME_MIN minutes , looking for a better coin to mine in less than $(($WTM_MINIMUM_MINING_TIME - $MINER_TIME_MIN)) minutes" | tee -a $LOG3_FILE
        sleep $(( (($WTM_MINIMUM_MINING_TIME - $MINER_TIME_MIN)) * 60 ))
        echo  "Looking for better coin" | tee -a $LOG3_FILE
      else
        echo "Mining $CURRENT_COIN for $MINER_TIME_MIN minutes, looking for a better coin to mine" | tee -a $LOG3_FILE
      fi
    fi

    python2.7 '/home/m1/WTM_SWITCHER' /home/m1/Logs/WTM.json  | tee -a $LOG3_FILE
    sleep 5
    source /home/m1/1bash  # source 1bash again in case it was edited between our timer checks
    CURRENT_COIN=$COIN
    CURRENT_COIN_ALGORITHM=$ALGORITHM
    TOP_COIN=$(cat /home/m1/Logs/WTM_top_coin | sed 's/:[0-9]*//')
    TIMEIN=$WTM_AUTO_SWITCH_SYNC_INTERVAL
    TIMEOUT=$(($TIMEIN * 60))

    if [ $damNmad_ALGO_SPECIFIC_OC == "YES" ]; then
      if [ $TOP_COIN == "FTC" -o $TOP_COIN == "ORB" -o $TOP_COIN == "PXC" -o $TOP_COIN == "VIVO" -o $TOP_COIN == "TZC" ]; then
        TOP_COIN_ALGORITHM="NEOSCRYPT"
      fi
      if [ $TOP_COIN == "ETH" -o $TOP_COIN == "ETC" -o $TOP_COIN == "EXP" -o $TOP_COIN == "UBQ" -o $TOP_COIN == "MUSIC" -o $TOP_COIN == "SOIL" -o $TOP_COIN == "PIRL" ]; then
        TOP_COIN_ALGORITHM="ETHASH"
      fi
      if [ $TOP_COIN == "BTG" -o $TOP_COIN == "ZEC" -o $TOP_COIN == "ZEN" -o $TOP_COIN == "HUSH" -o $TOP_COIN == "ZCL" -o $TOP_COIN == "KMD" -o $TOP_COIN == "VOTE" ]; then
        TOP_COIN_ALGORITHM="EQUIHASH"
      fi
      if [ $TOP_COIN == "SIGT" -o $TOP_COIN == "ALTCOM" ]; then
        TOP_COIN_ALGORITHM="SKUNK"
      fi
      if [ $TOP_COIN == "XMR" -o $TOP_COIN == "KRB" -o $TOP_COIN == "ETN" ]; then
        TOP_COIN_ALGORITHM="CRYPTONIGHT"
      fi
      if [ $TOP_COIN == "MONA" -o $TOP_COIN == "VTC" ]; then
        TOP_COIN_ALGORITHM="LYRA2REV2"
      fi
      if [ $TOP_COIN == "ZCOIN" ]; then
        TOP_COIN_ALGORITHM="LYRA2V2"
      fi
    fi

    if [[ "$CURRENT_COIN" != "$TOP_COIN" ]]; then
	OLDCOIN=$CURRENT_COIN
      sed -i '/^#/!s/'COIN=\"$CURRENT_COIN\"'/'COIN=\"$TOP_COIN\"/'' /home/m1/1bash
      cat /home/m1/Logs/WTM_current_revenue | grep `cat /home/m1/Logs/WTM_top_coin | awk -F: '{print $1}'` | awk -F: '{print $2}' >> /home/m1/Alerts/WTM_24H_REV
      SYNC_COUNT=$((`expr 1440 / $WTM_AUTO_SWITCH_SYNC_INTERVAL`))
      echo "$(tail -$SYNC_COUNT /home/m1/Alerts/WTM_24H_REV)" > /home/m1/Alerts/WTM_24H_REV
      sed -i '/^$/d' /home/m1/Alerts/WTM_24H_REV
      sleep 1
      echo "Current Coin Algo: $CURRENT_COIN_ALGORITHM" | tee -a $LOG3_FILE
      echo "Current Coin: $CURRENT_COIN" | tee -a $LOG3_FILE
      echo "Top Coin Algo: $TOP_COIN_ALGORITHM" | tee -a $LOG3_FILE
      echo "Top Coin: $TOP_COIN" | tee -a $LOG3_FILE

      if  [[ $damNmad_ALGO_SPECIFIC_OC == "NO" && $plusCPU == "NO" ]] || [[ $damNmad_ALGO_SPECIFIC_OC == "YES"  &&  $CURRENT_COIN_ALGORITHM == $TOP_COIN_ALGORITHM ]]; then
        echo "Switching Coin with same Algo or ALGO_SPECIFIC_OC=No, Restarting miner" | tee -a $LOG3_FILE
        echo "" | tee -a $LOG3_FILE
        if [[ -n  $(ps ax | grep -i screen | grep miner) ]]; then
          echo "Miner is running, lets make the switch" | tee -a $LOG3_FILE
          target=$(ps ax | grep -v cpuminer | grep -i screen | grep miner | awk '"miner" {print $1}')
          kill $target
          sleep 1
          #start new miner
          echo "    Commencing Miner Start Command" | tee -a $LOG3_FILE
		CHECK_MINER
            sudo pkill -e $TMINER
	    sudo pkill -f $TMINER
		source ~/8Coins
		3Main_Coin_Sequence
	echo $( ps ax | grep miner | grep -o 'SCREEN.*' ) | tee -a $LOG3_FILE
          echo "process in screen miner; attach with: screen -r miner" | tee -a $LOG3_FILE
          echo "" | tee -a $LOG3_FILE
          echo "$(date) Mining switched from $OLDCOIN to $TOP_COIN" | tee -a $LOG3_FILE $WTM_HISTORY
          echo "Check again in $TIMEOUT seconds" | tee -a $LOG3_FILE
        fi

      elif [[ $damNmad_ALGO_SPECIFIC_OC == "YES"  &&  $CURRENT_COIN_ALGORITHM != $TOP_COIN_ALGORITHM ]]; then
        echo "Switching Coin with ALGO_SPECIFIC_OC=YES and different Algo, Restarting 3main"  | tee -a $LOG3_FILE
        sleep 1
        pkill -f 3main
      fi
      echo "$(date) - Mining switched from $OLDCOIN to $TOP_COIN" | tee -a $LOG3_FILE $WTM_HISTORY
      echo "24 Hour Average Revenue: $WTM_AVERAGE_REV"
      echo "Check again in $TIMEOUT seconds" | tee -a $LOG3_FILE
      echo "" | tee -a $LOG3_FILE
      echo "" | tee -a $LOG3_FILE

      sleep $TIMEOUT


    else
      echo "$(date) - Same Coin on Top, Continue mining $CURRENT_COIN"   | tee -a $LOG3_FILE
      echo "24 Hour Average Revenue: $WTM_AVERAGE_REV"
      echo "Check again in $TIMEOUT seconds" | tee -a $LOG3_FILE
      echo "" | tee -a $LOG3_FILE
      echo "" | tee -a $LOG3_FILE
      sleep 1
      cat /home/m1/Logs/WTM_current_revenue | grep `cat /home/m1/Logs/WTM_top_coin | awk -F: '{print $1}'` | awk -F: '{print $2}' >> /home/m1/Alerts/WTM_24H_REV
      SYNC_COUNT=$((`expr 1440 / $WTM_AUTO_SWITCH_SYNC_INTERVAL`))
      echo "$(tail -$SYNC_COUNT /home/m1/Alerts/WTM_24H_REV)" > /home/m1/Alerts/WTM_24H_REV
      sed -i '/^$/d' /home/m1/Alerts/WTM_24H_REV
      sleep $TIMEOUT
    fi
done
